{"version":3,"file":"main.4460e870867af4469b8b.bundle.js","sources":["webpack:///./src/button.tsx"],"sourcesContent":["import * as React from 'react'\nimport classNames from 'classnames'\nimport omit from 'lodash.omit'\n\nconst BLACK_LIST = [\n  'prefixCls',\n  'className',\n  'style',\n  'href',\n  'target',\n  'htmlType',\n  'className',\n  'disabled',\n  'onClick',\n]\n\nexport interface IButtonProps {\n  prefixCls?: string\n  className?: string\n  style?: object\n  href?: string\n  target?: string\n  disabled?: boolean\n  htmlType?: 'button' | 'submit' | 'reset'\n  onClick?: React.MouseEventHandler<Element>\n}\n\nexport default class Button extends React.Component<IButtonProps> {\n  static defaultProps = {\n    prefixCls: 'zero-button',\n    className: '',\n    style: {},\n    disabled: false,\n  }\n\n  wrapValueBySpan(children: React.ReactNode): React.ReactNode {\n    if (children == null) {\n      return null\n    }\n\n    return React.Children.map(children, child => {\n      if (typeof child === 'string') {\n        return <span>{child}</span>\n      }\n\n      return child\n    })\n  }\n\n  renderLink(classes: string, children: React.ReactNode) {\n    const { disabled, href = '', target } = this.props\n    const nodeProps: any = omit(this.props, BLACK_LIST)\n\n    return (\n      <a\n        {...(disabled ? {} : { href, target })}\n        {...nodeProps}\n        className={classes}\n        onClick={this.handleClick}\n      >\n        {children}\n      </a>\n    )\n  }\n\n  renderButton(classes: string, children: React.ReactNode) {\n    const { disabled, htmlType } = this.props\n    const nodeProps: any = omit(this.props, BLACK_LIST)\n\n    return (\n      <button\n        {...nodeProps}\n        {...(htmlType ? { type: htmlType } : {})}\n        className={classes}\n        disabled={disabled}\n        onClick={this.handleClick}\n      >\n        {children}\n      </button>\n    )\n  }\n\n  handleClick: React.MouseEventHandler = e => {\n    const { disabled, onClick } = this.props\n\n    if (!disabled) {\n      onClick && onClick(e)\n    }\n  }\n\n  render() {\n    const { disabled, children, prefixCls, className, href } = this.props\n    const renderName: string = href ? 'renderLink' : 'renderButton'\n    const classes: string = classNames(prefixCls, className, {\n      [`${prefixCls}-disabled`]: disabled,\n    })\n\n    return this[renderName](classes, this.wrapValueBySpan(children))\n  }\n}\n"],"mappings":"AAIA","sourceRoot":""}